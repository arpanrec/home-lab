---
- name: Nextcloud | Mount Disk | Unencrypted | Create backup and ops directory
  ansible.builtin.file:
      path: "{{ item.path }}"
      state: directory
      mode: "0755"
      owner: "{{ item.owner | default('root') }}"
      group: "{{ item.group | default('root') }}"
  with_items:
      - path: "{{ cs_nc_external_drive_mount_path }}/backup"
        owner: "{{ cs_nc_run_user }}"
        group: "{{ cs_nc_run_group }}"
      - path: "{{ cs_nc_external_drive_mount_path }}/ops"
        owner: "{{ cs_nc_run_user }}"
        group: "{{ cs_nc_run_group }}"
      - path: "{{ cs_nc_external_drive_mount_path }}/nextcloud"
        owner: "{{ cs_nc_run_user }}"
        group: "{{ cs_nc_run_group }}"

- name: Nextcloud | Mount Disk | Unencrypted | Get all the groups
  become: true
  become_user: "{{ cs_nc_run_user }}"
  ansible.builtin.command:
      cmd: "php occ group:list --output=json"
      chdir: "{{ cs_nc_web_dir }}"
  changed_when: false
  register: nextcloud_mount_groups

- name: Nextcloud | Mount Disk | Unencrypted | Create group
  become: true
  become_user: "{{ cs_nc_run_user }}"
  ansible.builtin.command:
      cmd: "php occ group:add '{{ cs_nc_files_external_mount_group_name }}'"
      chdir: "{{ cs_nc_web_dir }}"
  changed_when: true
  when: cs_nc_files_external_mount_group_name not in nextcloud_mount_groups.stdout | from_json

- name: Nextcloud | Mount Disk | Unencrypted | Get all storage
  become: true
  become_user: "{{ cs_nc_run_user }}"
  ansible.builtin.command:
      cmd: "php occ files_external:list --output=json"
      chdir: "{{ cs_nc_web_dir }}"
  changed_when: false
  register: nextcloud_mount_storages

- name: Nextcloud | Mount Disk | Unencrypted | Set fact for existing storage
  ansible.builtin.set_fact:
      existing_storage_mount: "{{ nextcloud_mount_storages.stdout | from_json
          | community.general.json_query('[?mount_point==`/' + cs_nc_files_external_mount_folder_name + '`]') }}"

- name: Nextcloud | Mount Disk | Unencrypted | Fail if multiple storage found
  ansible.builtin.fail:
      msg: "Multiple storage found with same name"
  when: existing_storage_mount | length > 1

- name: Nextcloud | Mount Disk | Unencrypted | Test Basic config
  when: existing_storage_mount | length == 1
  ansible.builtin.assert:
      that:
          - existing_storage_mount[0].storage == "\\OC\\Files\\Storage\\Local"
          - existing_storage_mount[0].configuration.datadir == cs_nc_external_drive_mount_path + "/nextcloud"
      fail_msg: "Storage type should be \\OC\\Files\\Storage\\Local
          and configuration.datadir should be {{ cs_nc_external_drive_mount_path }}/nextcloud"
      success_msg: "Storage type is \\OC\\Files\\Storage\\Local
          and configuration.datadir is {{ cs_nc_external_drive_mount_path }}/nextcloud"

- name: Nextcloud | Mount Disk | Unencrypted | Create storage
  become: true
  become_user: "{{ cs_nc_run_user }}"
  ansible.builtin.command:
      cmd: "php occ files_external:create '{{ cs_nc_files_external_mount_folder_name }}' local null::null
          --config datadir='{{ cs_nc_external_drive_mount_path }}/nextcloud'"
      chdir: "{{ cs_nc_web_dir }}"
  changed_when: true
  when: existing_storage_mount | length == 0

- name: Nextcloud | Mount Disk | Unencrypted | Repopulate nextcloud_mount_storages
  become: true
  become_user: "{{ cs_nc_run_user }}"
  ansible.builtin.command:
      cmd: "php occ files_external:list --output=json"
      chdir: "{{ cs_nc_web_dir }}"
  changed_when: false
  register: nextcloud_mount_storages

- name: Nextcloud | Mount Disk | Unencrypted | Set Mount ID
  ansible.builtin.set_fact:
      existing_storage_mount_id: "{{ nextcloud_mount_storages.stdout
          | from_json | community.general.json_query('[?mount_point==`/'
          + cs_nc_files_external_mount_folder_name + '`].mount_id') | first }}"

- name: Nextcloud | Mount Disk | Unencrypted | Set Config
  become: true
  become_user: "{{ cs_nc_run_user }}"
  ansible.builtin.command:
      cmd: php occ {{ item }}
      chdir: "{{ cs_nc_web_dir }}"
  changed_when: true
  with_items:
      - files_external:applicable --remove-all {{ existing_storage_mount_id }}
      - "files_external:applicable --add-group={{ cs_nc_files_external_mount_group_name }} \
        {{ existing_storage_mount_id }}"
      - files_external:option {{ existing_storage_mount_id }} enable_sharing true
      - files_external:option {{ existing_storage_mount_id }} previews true
      - files_external:option {{ existing_storage_mount_id }} filesystem_check_changes 1
      - files_external:option {{ existing_storage_mount_id }} encoding_compatibility false
      - files_external:option {{ existing_storage_mount_id }} readonly false
      - files_external:option {{ existing_storage_mount_id }} encrypt false

- name: Nextcloud | Mount Disk | Unencrypted | Create systemd unit files for nextcloud scan files
  ansible.builtin.copy:
      dest: "{{ item.dest }}"
      content: "{{ item.content }}"
      mode: "0644"
  with_items:
      - dest: /etc/systemd/system/nextcloudscanfiles.service
        content: |+
            [Unit]
            Description=Nextcloud scan files

            [Service]
            User={{ cs_nc_run_user }}
            Group={{ cs_nc_run_group }}
            ExecCondition=/usr/bin/php -f {{ cs_nc_web_dir }}/occ status -e
            ExecStart=/usr/bin/php -f {{ cs_nc_web_dir }}/occ files:scan --all
            WorkingDirectory={{ cs_nc_web_dir }}
            KillMode=process

      - dest: /etc/systemd/system/nextcloudscanfiles.timer
        content: |
            [Unit]
            Description=Run Nextcloud cron every 15 minutes

            [Timer]
            OnBootSec=1min
            OnUnitActiveSec=15min
            Unit=nextcloudscanfiles.service

            [Install]
            WantedBy=multi-user.target

- name: Nextcloud | Mount Disk | Unencrypted | Enable and start nextcloudscanfiles.timer
  ansible.builtin.systemd_service:
      name: nextcloudscanfiles.timer
      enabled: true
      state: started
      daemon_reload: true
