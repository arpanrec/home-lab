---
- name: Nextcloud | Users | Test | Make sure admin user is not in users list
  ansible.builtin.assert:
      that: cs_nc_admin_user not in cs_nc_users
      fail_msg: "{{ cs_nc_admin_user }} should not be in {{ cs_nc_users }}"
      success_msg: "{{ cs_nc_admin_user }} is not in {{ cs_nc_users }}"

- name: Nextcloud | Users | Test | Make sure user display name is not empty
  ansible.builtin.assert:
      that:
          - cs_nc_user.value.display_name is defined
          - cs_nc_user.value.display_name | type_debug == 'str'
          - cs_nc_user.value.display_name | length > 0
      fail_msg: "Email address '{{ cs_nc_user.value }}' is not valid for user '{{ cs_nc_user.key }}'"
      success_msg: "Email address '{{ cs_nc_user.value }}' is valid for user '{{ cs_nc_user.key }}'"
  loop: "{{ cs_nc_users | dict2items }}"
  when: cs_nc_user.value.display_name is defined
  loop_control:
      loop_var: cs_nc_user

- name: Nextcloud | Users | Test | Make sure all the users have valid email addresses
  ansible.builtin.assert:
      that:
          - cs_nc_user.value.email is defined
          - cs_nc_user.value.email is regex(cs_nc_email_regex)
      fail_msg: "Email address '{{ cs_nc_user.value }}' is not valid for user '{{ cs_nc_user.key }}'"
      success_msg: "Email address '{{ cs_nc_user.value }}' is valid for user '{{ cs_nc_user.key }}'"
  loop: "{{ cs_nc_users | dict2items }}"
  loop_control:
      loop_var: cs_nc_user

- name: Nextcloud | Users | Test | Make sure that groups are in dict format
  ansible.builtin.assert:
      that:
          - cs_nc_user.value.groups | type_debug == 'dict'
      fail_msg: "Groups should be in dict format for user '{{ cs_nc_user.key }}'"
  loop: "{{ cs_nc_users | dict2items }}"
  when: cs_nc_user.value.groups is defined
  loop_control:
      loop_var: cs_nc_user

- name: Nextcloud | Users | Test | Make sure that no user is part of admin group
  ansible.builtin.assert:
      that:
          - "'admin' not in cs_nc_user.value.groups"
      fail_msg: "Email address '{{ cs_nc_user.value }}' is not valid for user '{{ cs_nc_user.key }}'"
      success_msg: "Email address '{{ cs_nc_user.value }}' is valid for user '{{ cs_nc_user.key }}'"
  loop: "{{ cs_nc_users | dict2items }}"
  when: cs_nc_user.value.groups is defined and cs_nc_user.value.groups | length > 0
  loop_control:
      loop_var: cs_nc_user
