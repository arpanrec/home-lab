---
- name: Nextcloud | Patch Cloud System | Gather Facts
  ansible.builtin.setup:

- name: Nextcloud | Patch Cloud System | Linux Patching
  ansible.builtin.import_role:
      name: arpanrec.nebula.linux_patching
  vars:
      linux_patching_rv_install_devel_packages: true

- name: Nextcloud | Patch Cloud System | Make sure zsh is installed
  ansible.builtin.apt:
      name: zsh
      state: present
      update_cache: true

- name: Nextcloud | Patch Cloud System | Create ssh user
  when: cs_nc_vm_ssh_service_user_id != "root"
  ansible.builtin.import_role:
      name: arpanrec.nebula.user_add
  vars:
      user_add_rv_username: "{{ cs_nc_vm_ssh_service_user_id }}"
      user_add_rv_user_default_shell: "/bin/zsh"
      user_add_rv_user_extra_groups: ["wheel"]
      user_add_rv_ssh_access_public_key_content_list:
          - "{{ cs_nc_vm_ssh_priv_id_ecdsa_b64 | b64decode
            | get_encrypted_id_ecdsa_pub_key(password=cs_nc_vm_ssh_priv_id_ecdsa_password) }}"

- name: Nextcloud | Patch Cloud System | Fail if service user is root
  ansible.builtin.fail:
      msg: "Service user cannot be root"
  when: cs_nc_vm_ssh_service_user_id == "root"

- name: Nextcloud | Patch Cloud System | SSH Hardening
  ansible.builtin.import_role:
      name: arpanrec.nebula.ssh_hardening

- name: Nextcloud | Patch Cloud System | Install Docker
  ansible.builtin.import_role:
      name: geerlingguy.docker
  vars:
      docker_users:
          - "{{ cs_nc_vm_ssh_service_user_id }}"

- name: Nextcloud | Patch Cloud System | Flush Handlers after root tasks
  ansible.builtin.meta: flush_handlers

- name: Nextcloud | Patch Cloud System | Beautify Terminal
  become: true
  become_user: "{{ cs_nc_vm_ssh_service_user_id }}"
  ansible.builtin.import_role:
      name: arpanrec.nebula.terminal

- name: Nextcloud | Patch Cloud System | Flush Handlers after user tasks
  become: true
  become_user: "{{ cs_nc_vm_ssh_service_user_id }}"
  ansible.builtin.meta: flush_handlers

- name: Nextcloud | Create log directory
  ansible.builtin.file:
      path: "{{ cs_nc_fail2ban_log_file | dirname }}"
      state: directory
      mode: "0755"

- name: Nextcloud | Touch log file
  ansible.builtin.file:
      path: "{{ cs_nc_fail2ban_log_file }}"
      state: touch
      mode: "0777"

- name: Nextcloud | Add fail2ban filter
  ansible.builtin.copy:
      mode: "0644"
      dest: /etc/fail2ban/filter.d/nextcloud.conf
      src: files/jail2ban.filter.conf

- name: Nextcloud | Add fail2ban config
  ansible.builtin.template:
      mode: "0644"
      dest: /etc/fail2ban/jail.d/nextcloud.conf
      src: templates/jail2ban.conf.j2

- name: Nextcloud | Restart fail2ban
  ansible.builtin.systemd_service:
      name: "{{ item }}"
      enabled: true
      state: restarted
  with_items:
      - fail2ban
      - sendmail

- name: Nextcloud | Install Packages
  ansible.builtin.apt:
      state: present
      name:
          - python3
          - python3-pip
          - python3-venv
          - git
          - curl
          - jq
          - ca-certificates
          - apt-transport-https
          - unzip
          - wget
          - zip
          - ffmpeg
          - lsb-release
          - gpg
          - libvips-dev
          - libvips42
          - software-properties-common
          - libsystemd-dev
          - imagemagick
          - python3-mysqldb
          - python3-lxml
          - python3-psycopg2
          - memcached
          - libmagickcore-6.q16-6-extra

- name: Nextcloud | Change ImageMagick policy
  ansible.builtin.replace:
      path: /etc/ImageMagick-6/policy.xml
      regexp: 'rights="none" pattern="{{ item }}"'
      replace: 'rights="read|write" pattern="{{ item }}"'
      backup: true
  with_items:
      - "PNG"
      - "PDF"
      - "XPS"
      - "EPS"
      - "PS2"
      - "PS"
      - "PS3"

- name: Nextcloud | Enable memcache.distributed
  ansible.builtin.systemd_service:
      name: memcached
      enabled: true
      state: started

- name: Nextcloud | Stop old dependency containers
  community.docker.docker_container:
      name: "{{ item }}"
      state: absent
      force_kill: true
  with_items:
      - nextcloud-mysql
      - nextcloud-redis
      - nextcloud-postgres
      - nextcloud-imaginary
      - nextcloud-elasticsearch

- name: Nextcloud | Create Elasticsearch Data Directory
  ansible.builtin.file:
      path: "{{ cs_nc_elasticsearch_data_dir }}"
      state: directory
      mode: "0777"
      owner: root
      group: root
      recurse: true

- name: Nextcloud | Create Elasticsearch Container
  community.docker.docker_container:
      name: nextcloud-elasticsearch
      image: "docker.io/nextcloud/aio-fulltextsearch:latest"
      user: "1000:1000"
      volumes:
          - "{{ cs_nc_elasticsearch_data_dir }}:/usr/share/elasticsearch/data:rw"
      ports:
          - "9200:9200"
          - "9300:9300"
      state: started
      restart_policy: always
      env:
          TZ: Asia/Kolkata
          "discovery.type": "single-node"
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          "node.name": "es01"
          "cluster.name": docker-cluster
          "bootstrap.memory_lock": "true"
          "http.port": "9200"
          "xpack.license.self_generated.type": basic
          "xpack.security.enabled": "false"
          "logger.org.elasticsearch.discovery": WARN
          ELASTIC_CONTAINER: "true"
          FULLTEXTSEARCH_PASSWORD: "{{ cs_nc_elasticsearch_password }}"
      ulimits:
          - "memlock:-1:-1"

- name: Nextcloud | Run Imaginary
  community.docker.docker_container:
      name: nextcloud-imaginary
      image: "docker.io/nextcloud/aio-imaginary:latest"
      state: started
      restart_policy: always
      ports:
          - "9000:9000"
      env:
          TZ: "Asia/Kolkata"
          IMAGINARY_SECRET: "{{ cs_nc_imaginary_key }}"
          PORT: "9000"
      command: -enable-url-source

- name: Nextcloud | Run postgres docker
  community.docker.docker_container:
      name: nextcloud-postgres
      image: docker.io/library/postgres:16.3
      volumes:
          - "{{ cs_nc_postgres_data_dir }}:/var/lib/postgresql/data"
      state: started
      ports:
          - "5432:5432"
      env:
          POSTGRES_PASSWORD: "{{ cs_nc_postgres_root_password }}"
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres

- name: Nextcloud | Wait for postgres to start
  community.postgresql.postgresql_ping:
      login_host: "127.0.0.1"
      login_password: "{{ cs_nc_postgres_root_password }}"
      login_user: "postgres"
      login_port: "5432"
  register: is_postgres_up
  until: is_postgres_up.is_available
  retries: 10
  delay: 5

- name: Nextcloud | Create postgres user
  community.postgresql.postgresql_user:
      name: "nextcloud"
      password: "{{ cs_nc_postgres_password }}"
      login_host: "127.0.0.1"
      login_user: "postgres"
      login_password: "{{ cs_nc_postgres_root_password }}"
      login_port: "5432"

- name: Nextcloud | Create postgres database
  community.postgresql.postgresql_db:
      name: "nextcloud"
      state: "present"
      owner: "nextcloud"
      login_user: "postgres"
      login_password: "{{ cs_nc_postgres_root_password }}"
      login_host: "127.0.0.1"
      login_port: "5432"

- name: Nextcloud | Run Redis docker
  community.docker.docker_container:
      name: "nextcloud-redis"
      image: "docker.io/library/redis:7.2.0"
      state: "started"
      restart_policy: "always"
      volumes:
          - "{{ cs_nc_redis_data_dir }}/redis:/data"
      ports:
          - "6379:6379"
      command: redis-server --save 20 1

- name: Nextcloud | Download php key
  ansible.builtin.get_url:
      url: "https://packages.sury.org/php/apt.gpg"
      dest: "/etc/apt/trusted.gpg.d/php.gpg"
      mode: "0644"

- name: Nextcloud | Add php repo
  ansible.builtin.apt_repository:
      repo: "deb [signed-by=/etc/apt/trusted.gpg.d/php.gpg] https://packages.sury.org/php/
          {{ ansible_distribution_release }} main"
      state: present
      filename: "php"
      update_cache: true

- name: Nextcloud | Install php
  ansible.builtin.apt:
      name:
          - php{{ cs_nc_php_version }}
          - php{{ cs_nc_php_version }}-cli
          - php{{ cs_nc_php_version }}-curl
          - php{{ cs_nc_php_version }}-gd
          - php{{ cs_nc_php_version }}-bz2
          - php{{ cs_nc_php_version }}-mbstring
          - php{{ cs_nc_php_version }}-intl
          - php{{ cs_nc_php_version }}-xml
          - php{{ cs_nc_php_version }}-zip
          - php{{ cs_nc_php_version }}-common
          - php{{ cs_nc_php_version }}-pgsql
          - php{{ cs_nc_php_version }}-ldap
          - php{{ cs_nc_php_version }}-smbclient
          - php{{ cs_nc_php_version }}-imap
          - php{{ cs_nc_php_version }}-bcmath
          - php{{ cs_nc_php_version }}-gmp
          - php{{ cs_nc_php_version }}-imagick
          - php{{ cs_nc_php_version }}-redis
          - php{{ cs_nc_php_version }}-apcu
          - php{{ cs_nc_php_version }}-opcache
          - php{{ cs_nc_php_version }}-igbinary
          - php{{ cs_nc_php_version }}-memcached
          - php{{ cs_nc_php_version }}-soap
          - php{{ cs_nc_php_version }}-xmlrpc
          - php{{ cs_nc_php_version }}-mysql
          - php{{ cs_nc_php_version }}-dev
          - php{{ cs_nc_php_version }}-imagick
          - php{{ cs_nc_php_version }}-fpm

- name: Nextcloud | Install Apache2
  ansible.builtin.apt:
      name:
          - apache2
          - apache2-utils
          - libapache2-mod-php{{ cs_nc_php_version }}

- name: Nextcloud | PHP ini config
  community.general.ini_file:
      path: "{{ item.path }}"
      section: "{{ item.section | default('') }}"
      option: "{{ item.option }}"
      value: "{{ item.value }}"
      mode: "0644"
      create: false
      no_extra_spaces: "{{ item.no_extra_spaces | default(true) }}"
  with_items:
      - path: /etc/php/{{ cs_nc_php_version }}/fpm/php.ini
        section: PHP
        option: memory_limit
        value: 1024M
        no_extra_spaces: false
      - path: /etc/php/{{ cs_nc_php_version }}/apache2/php.ini
        section: PHP
        option: memory_limit
        value: 1024M
        no_extra_spaces: false
      - path: /etc/php/{{ cs_nc_php_version }}/fpm/pool.d/www.conf
        section: www
        option: env[HOSTNAME]
        value: $HOSTNAME
        no_extra_spaces: false
      - path: /etc/php/{{ cs_nc_php_version }}/fpm/pool.d/www.conf
        section: www
        option: env[PATH]
        value: /usr/local/bin:/usr/bin:/bin
        no_extra_spaces: false
      - path: /etc/php/{{ cs_nc_php_version }}/fpm/pool.d/www.conf
        section: www
        option: env[TMP]
        value: /tmp
        no_extra_spaces: false
      - path: /etc/php/{{ cs_nc_php_version }}/fpm/pool.d/www.conf
        section: www
        option: env[TMPDIR]
        value: /tmp
        no_extra_spaces: false
      - path: /etc/php/{{ cs_nc_php_version }}/fpm/pool.d/www.conf
        section: www
        option: env[TEMP]
        value: /tmp
        no_extra_spaces: false
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/apcu.ini
        option: extension
        value: apcu.so
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/apcu.ini
        option: apc.enable_cli
        value: 1
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: zend_extension
        value: opcache.so
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.enable
        value: 1
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.enable_cli
        value: 1
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.revalidate_freq
        value: 60
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.validate_timestamps
        value: 0
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.save_comments
        value: 1
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.jit
        value: 1255
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.jit_buffer_size
        value: 128M
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.interned_strings_buffer
        value: 64
      - path: /etc/php/{{ cs_nc_php_version }}/mods-available/opcache.ini
        option: opcache.memory_consumption
        value: 256

- name: Nextcloud | Enable php fpm
  ansible.builtin.systemd_service:
      name: php{{ cs_nc_php_version }}-fpm
      enabled: true
      state: restarted

- name: Nextcloud | Create SSL Directory
  ansible.builtin.file:
      path: /etc/ssl/{{ cs_nc_domain }}
      state: directory
      mode: "0755"

- name: Nextcloud | Copy certs
  ansible.builtin.copy:
      content: "{{ item.content | b64decode }}"
      dest: "/etc/ssl/{{ cs_nc_domain }}/{{ item.dest }}"
      mode: "0644"
  with_items:
      - content: "{{ cs_nc_full_chain_b64 }}"
        dest: fullchain.pem
      - content: "{{ cs_nc_priv_key_b64 }}"
        dest: privkey.pem

- name: Nextcloud | Create Apache2 config
  ansible.builtin.template:
      src: templates/apache-nc-conf.js
      dest: "/etc/apache2/sites-available/nextcloud.conf"
      mode: "0644"

- name: Nextcloud | Enable Apache2 Modules
  community.general.apache2_module:
      name: "{{ item }}"
      state: present
  with_items:
      - proxy_fcgi
      - setenvif
      - rewrite
      - headers
      - env
      - dir
      - mime
      - ssl
      - socache_shmcb

- name: Nextcloud | Enable Apache2 config
  ansible.builtin.command:
      cmd: a2enconf php{{ cs_nc_php_version }}-fpm
  changed_when: true

- name: Nextcloud | Enable Apache2 sites
  ansible.builtin.command:
      cmd: a2ensite default-ssl nextcloud
  changed_when: true

- name: Nextcloud | Check if Nextcloud is installed
  ansible.builtin.stat:
      path: "{{ cs_nc_web_root_dir }}"
  register: is_nc_installed

- name: Nextcloud | Download New
  when: not is_nc_installed.stat.exists
  block:
      - name: Nextcloud | Download New | Get Nextcloud
        ansible.builtin.get_url:
            url: "https://download.nextcloud.com/server/releases/nextcloud-{{ cs_nc_version }}.zip"
            dest: "/tmp/nextcloud-{{ cs_nc_version }}.zip"
            mode: "0644"

      - name: Nextcloud | Download New | Create unzip directory
        ansible.builtin.file:
            path: /tmp/nextcloud-{{ cs_nc_version }}
            state: directory
            mode: "0755"

      - name: Nextcloud | Download New | Unzip Nextcloud
        ansible.builtin.unarchive:
            src: "/tmp/nextcloud-{{ cs_nc_version }}.zip"
            dest: "/tmp/nextcloud-{{ cs_nc_version }}"
            remote_src: true
            creates: "/tmp/nextcloud-{{ cs_nc_version }}/index.php"
            mode: "0644"

      - name: Nextcloud | Download New | Copy Nextcloud to {{ cs_nc_web_root_dir }}
        ansible.builtin.copy:
            src: "/tmp/nextcloud-{{ cs_nc_version }}/nextcloud/"
            dest: "{{ cs_nc_web_root_dir }}"
            remote_src: true
            owner: www-data
            group: www-data
            mode: "0755"

- name: Nextcloud | Remove AD
  ansible.builtin.command:
      cmd: truncate -s 0 {{ cs_nc_web_root_dir }}/apps/settings/templates/settings/personal/development.notice.php
  changed_when: true

- name: Nextcloud | change ownership
  ansible.builtin.file:
      path: "{{ cs_nc_web_root_dir }}"
      owner: www-data
      group: www-data
      mode: "0755"
      recurse: true

- name: Nextcloud | Create data directory
  ansible.builtin.file:
      path: "{{ cs_nc_data_dir }}"
      state: directory
      owner: www-data
      group: www-data
      mode: "0755"

- name: Nextcloud | Check if Nextcloud is installed
  ansible.builtin.stat:
      path: "{{ cs_nc_web_root_dir }}/config/CAN_INSTALL"
  register: is_nc_occ_installed

- name: Nextcloud | Install Nextcloud for the first time
  when: is_nc_occ_installed.stat.exists
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ maintenance:install --database 'pgsql' \
          --database-name 'nextcloud' --database-user 'nextcloud' \
          --database-pass '{{ cs_nc_postgres_password }}' --database-host '127.0.0.1:5432' \
          --admin-user '{{ cs_nc_admin_user }}' --admin-pass '{{ cs_nc_admin_password }}' \
          --data-dir '{{ cs_nc_data_dir }}' --no-interaction"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: true

- name: Nextcloud | Copy icons
  ansible.builtin.copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: "0644"
  with_items:
      - src: files/nc-favicon.svg
        dest: /tmp/nc-favicon.ico
      - src: files/nc-logo.png
        dest: /tmp/nc-logo.png
      - src: files/nc-logoheader.png
        dest: /tmp/nc-logoheader.png
      - src: files/nc-background.jpg
        dest: /tmp/nc-background.jpg

- name: Nextcloud | Set nextcloud config
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ {{ item }}"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: true
  with_items:
      - "app:enable encryption admin_audit bruteforcesettings files_external suspicious_login twofactor_totp user_ldap"
      - "encryption:enable"
      - "encryption:enable-master-key"

      - "config:system:set trusted_domains 0 --value={{ cs_nc_domain }}"
      - "config:system:set trusted_domains 1 --value={{ ansible_fqdn }}"
      - "config:system:set trusted_domains 2 --value=localhost"
      - "config:system:set trusted_domains 3 --value=127.0.0.1"

      - "config:system:set dbtype --value pgsql"
      - "config:system:set dbname --value nextcloud"
      - "config:system:set dbuser --value nextcloud"
      - "config:system:set dbpassword --value {{ cs_nc_postgres_password }}"
      - "config:system:set dbhost --value 127.0.0.1:5432"

      - "config:system:set redis host --value 127.0.0.1"
      - "config:system:set redis port --value 6379"

      - "config:system:set memcache.local --value '\\OC\\Memcache\\APCu'"
      - "config:system:set memcache.distributed --value '\\OC\\Memcache\\Redis'"
      - "config:system:set memcache.locking --value '\\OC\\Memcache\\Redis'"

      - "config:system:set log_type --value file"
      - "config:system:set logfile --value '{{ cs_nc_log_file }}'"
      - "config:system:set logfile_audit --value '{{ cs_nc_log_file }}'"
      - "config:system:set log.condition apps 0 --value=admin_audit"
      - "config:app:set admin_audit logfile --value={{ cs_nc_log_file }}"
      - "config:system:set loglevel --value 2"
      - "config:system:set logdateformat --value 'Y-m-d H:i:s'"
      - "config:system:set logtimezone --value '{{ cs_nc_logtimezone }}'"
      - "config:system:set default_phone_region --value '{{ cs_nc_default_phone_region }}'"

      - "config:system:set maintenance_window_start --type=integer --value=1"

      - "db:add-missing-indices"

      - "config:system:set mail_smtpmode --value {{ cs_nc_mail_smtpmode }}"
      - "config:system:set mail_sendmailmode --value {{ cs_nc_mail_sendmailmode }}"
      - "config:system:set mail_smtpport --value {{ cs_nc_mail_smtpport }}"
      - "config:system:set mail_from_address --value {{ cs_nc_mail_from_address }}"
      - "config:system:set mail_domain --value {{ cs_nc_mail_domain }}"
      - "config:system:set mail_smtpsecure --value {{ cs_nc_mail_smtpsecure }}"
      - "config:system:set mail_smtpauth --value {{ cs_nc_mail_smtpauth }}"
      - "config:system:set mail_smtphost --value {{ cs_nc_mail_smtphost }}"
      - "config:system:set mail_smtpname --value {{ cs_nc_mail_smtpname }}"
      - "config:system:set mail_smtppassword --value {{ cs_nc_mail_smtppassword }}"

      - "config:system:set skeletondirectory --value ''"
      - "config:system:set templatedirectory --value ''"

      - "config:system:set overwriteprotocol --value https"
      - "config:system:set overwrite.cli.url --value https://{{ cs_nc_domain }}:{{ cs_nc_port }}"

      - "config:system:set default_language --value en"
      - "config:system:set default_locale --value en_IN"

      - "config:app:set theming AndroidClientUrl
        --value 'https://play.google.com/store/apps/details?id=com.nextcloud.client'"
      - "config:app:set theming iOSClientUrl --value 'https://itunes.apple.com/us/app/nextcloud/id1125420102?mt=8'"
      - "config:app:set theming iTunesAppId --value '1125420102'"

      - "theming:config name 'Home Server'"
      - "theming:config slogan 'Where bytes go to retire and data parties in pajamas!'"
      - "theming:config url 'https://{{ cs_nc_domain }}:{{ cs_nc_port }}'"
      - "theming:config color '#2C2222'"
      - "theming:config favicon '/tmp/nc-favicon.ico'"
      - "theming:config logo '/tmp/nc-logo.png'"
      - "theming:config logoheader '/tmp/nc-logoheader.png'"
      - "theming:config background '/tmp/nc-background.jpg'"
      - "theming:config disable-user-theming yes"

      # - "twofactorauth:enforce --on --exclude=admin --exclude=daily"
      - "twofactorauth:enforce --on --exclude=admin"

      # - "config:system:set enabledPreviewProviders 1 --value='OC\\Preview\\BMP'"
      # - "config:system:set enabledPreviewProviders 2 --value='OC\\Preview\\GIF'"
      # - "config:system:set enabledPreviewProviders 3 --value='OC\\Preview\\JPEG'"
      # - "config:system:set enabledPreviewProviders 4 --value='OC\\Preview\\PNG'"
      # - "config:system:set enabledPreviewProviders 5 --value='OC\\Preview\\SVG'"
      # - "config:system:set enabledPreviewProviders 6 --value='OC\\Preview\\HEIC'"
      # - "config:system:set enabledPreviewProviders 7 --value='OC\\Preview\\MP3'"
      # - "config:system:set enabledPreviewProviders 8 --value='OC\\Preview\\TXT'"
      # - "config:system:set enabledPreviewProviders 9 --value='OC\\Preview\\MarkDown'"
      # - "config:system:set enabledPreviewProviders 10 --value='OC\\Preview\\Movie'"
      # - "config:system:set enabledPreviewProviders 11 --value='OC\\Preview\\PDF'"
      # - "config:system:set enabledPreviewProviders 12 --value='OC\\Preview\\Photoshop'"
      # - "config:system:set enabledPreviewProviders 13 --value='OC\\Preview\\Illustrator'"
      # - "config:system:set enabledPreviewProviders 14 --value='OC\\Preview\\TIFF'"
      # - "config:system:set enabledPreviewProviders 15 --value='OC\\Preview\\XBitmap'"
      # - "config:system:set enabledPreviewProviders 16 --value='OC\\Preview\\XPM'"
      # - "config:system:set enabledPreviewProviders 17 --value='OC\\Preview\\XCF'"
      # - "config:system:set enabledPreviewProviders 18 --value='OC\\Preview\\MP4'"
      # - "config:system:set enabledPreviewProviders 19 --value='OC\\Preview\\AVI'"
      # - "config:system:set enabledPreviewProviders 20 --value='OC\\Preview\\MKV'"
      # - "config:system:set enabledPreviewProviders 21 --value='OC\\Preview\\WMV'"
      # - "config:system:set enabledPreviewProviders 22 --value='OC\\Preview\\FLV'"
      # - "config:system:set enabledPreviewProviders 23 --value='OC\\Preview\\MOV'"
      # - "config:system:set enabledPreviewProviders 24 --value='OC\\Preview\\WEBM'"
      # - "config:system:set enabledPreviewProviders 25 --value='OC\\Preview\\AVIF'"
      # - "config:system:set enabledPreviewProviders 26 --value='OC\\Preview\\WEBP'"
      # - "config:system:set enabledPreviewProviders 27 --value='OC\\Preview\\AVIF'"
      - "config:system:delete enabledPreviewProviders"
      - "config:system:set preview_imaginary_url --value 'http://127.0.0.1:9000'"
      - "config:system:set preview_imaginary_key --value '{{ cs_nc_imaginary_key }}'"

- name: Nextcloud | List all apps
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ app:list --output=json"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: false
  register: cs_nc_app_list

- name: Nextcloud | Install app
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ app:install {{ item }}"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: true
  with_items:
      - "files_external"
      - "user_ldap"
      - "admin_audit"
      - "twofactor_totp"
      - "encryption"
      - "bruteforcesettings"
      - "suspicious_login"
      - "fulltextsearch"
      - "files_fulltextsearch"
      - "fulltextsearch_elasticsearch"
  when: >
      not
      (
        item in cs_nc_app_list.stdout | from_json | json_query('enabled')
      or
        item in cs_nc_app_list.stdout | from_json | json_query('disabled')
      )

- name: Nextcloud | create nextcloud-fulltext-elasticsearch-worker
  ansible.builtin.copy:
      dest: /etc/systemd/system/nextcloud-fulltext-elasticsearch-worker.service
      content: |+
          [Unit]
          Description=Elasticsearch Worker for Nextcloud Fulltext Search
          After=network.target

          [Service]
          User=www-data
          Group=www-data
          WorkingDirectory={{ cs_nc_web_root_dir }}
          ExecStart=/usr/bin/php {{ cs_nc_web_root_dir }}/occ fulltextsearch:live -q
          ExecStop=/usr/bin/php {{ cs_nc_web_root_dir }}/occ fulltextsearch:stop
          Nice=19
          Restart=always

          [Install]
          WantedBy=multi-user.target
      mode: "0644"

- name: Nextcloud | Enable nextcloud-fulltext-elasticsearch-worker
  ansible.builtin.systemd_service:
      name: nextcloud-fulltext-elasticsearch-worker.service
      enabled: true
      state: restarted
      daemon_reload: true

- name: Nextcloud | Set Apps Config
  ansible.builtin.set_fact:
      cs_nc_app_config:
          apps:
              fulltextsearch:
                  "app_navigation": "1"
                  enabled: "yes"
                  search_platform: "OCA\\FullTextSearch_Elasticsearch\\Platform\\ElasticSearchPlatform"
                  "types": ""
              fulltextsearch_elasticsearch:
                  enabled: "yes"
                  elastic_host: "http://elastic:{{ cs_nc_elasticsearch_password }}@127.0.0.1:9200"
                  elastic_index: "nextcloud"
                  elastic_type: "file"
                  analyzer_tokenizer: "standard"
                  types: ""

- name: Nextcloud | Write Apps Config
  ansible.builtin.copy:
      content: "{{ cs_nc_app_config | to_nice_json }}"
      dest: "/tmp/nc-apps-config.json"
      mode: "0644"

- name: Nextcloud | Import Apps Config
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ config:import /tmp/nc-apps-config.json"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: true

- name: Nextcloud | Create systemd unit files for nextcloud cron
  ansible.builtin.copy:
      dest: "{{ item.dest }}"
      content: "{{ item.content }}"
      mode: "0644"
  with_items:
      - dest: /etc/systemd/system/nextcloudcron.service
        content: |+
            [Unit]
            Description=Nextcloud cron.php job

            [Service]
            User=www-data
            ExecCondition=php -f {{ cs_nc_web_root_dir }}/occ status -e
            ExecStart=/usr/bin/php -f {{ cs_nc_web_root_dir }}/cron.php
            KillMode=process

      - dest: /etc/systemd/system/nextcloudcron.timer
        content: |
            [Unit]
            Description=Run Nextcloud cron every 15 minutes

            [Timer]
            OnBootSec=1min
            OnUnitActiveSec=15min
            Unit=nextcloudcron.service

            [Install]
            WantedBy=multi-user.target

- name: Nextcloud | Enable systemd timmer for nextcloud cron
  ansible.builtin.systemd_service:
      name: nextcloudcron.timer
      enabled: true
      state: restarted
      daemon_reload: true

- name: Nextcloud | Get all users
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ user:list --output=json"
      chdir: "{{ cs_nc_web_root_dir }}"
  register: cs_nc_user_list
  changed_when: false

- name: Nextcloud | Create Admin User if not exists
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ user:add --password-from-env --group='admin' --display-name='nc-admin-{{ cs_nc_admin_user }}'
          --email='{{ cs_nc_mail_smtpname }}' '{{ cs_nc_admin_user }}'"
      chdir: "{{ cs_nc_web_root_dir }}"
  environment:
      OC_PASS: "{{ cs_nc_admin_password }}"
  changed_when: true
  when: "cs_nc_admin_user not in cs_nc_user_list.stdout | from_json"

- name: Nextcloud | Get all users in admin group
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ group:list --output=json"
      chdir: "{{ cs_nc_web_root_dir }}"
  register: cs_nc_group_list
  changed_when: false

- name: Nextcloud | Disable all admin users
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ user:disable {{ item }}"
      chdir: "{{ cs_nc_web_root_dir }}"
  with_items: "{{ cs_nc_group_list.stdout | from_json | json_query('admin') }}"
  changed_when: true

- name: Nextcloud | Set admin user properties
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ {{ item }}"
      chdir: "{{ cs_nc_web_root_dir }}"
  register: cs_nc_group_list
  changed_when: true
  with_items:
      - "user:setting {{ cs_nc_admin_user }} settings email {{ cs_nc_mail_smtpname }}"
      - "user:setting {{ cs_nc_admin_user }} core lang en"
      - "twofactorauth:disable {{ cs_nc_admin_user }} totp"
      - "user:enable {{ cs_nc_admin_user }}"

- name: Nextcloud | Reset admin user password
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ {{ item }}"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: true
  with_items:
      - "user:resetpassword {{ cs_nc_admin_user }} --password-from-env"
  environment:
      OC_PASS: "{{ cs_nc_admin_password }}"

- name: Nextcloud | Get admin user info
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ user:info {{ cs_nc_admin_user }} --output=json"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: false
  register: cs_nc_admin_info

- name: Nextcloud | Set admin user display_name
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ user:setting {{ cs_nc_admin_user }} settings display_name 'nc-admin-{{ cs_nc_admin_user }}'"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: true
  when: "'nc-admin-'+cs_nc_admin_user != cs_nc_admin_info.stdout | from_json | json_query('display_name')"

- name: Nextcloud | Add user to admin group
  become: true
  become_user: www-data
  ansible.builtin.command:
      cmd: "php occ group:adduser admin {{ cs_nc_admin_user }}"
      chdir: "{{ cs_nc_web_root_dir }}"
  changed_when: true
  when: "'admin' not in cs_nc_admin_info.stdout | from_json | json_query('groups')"

- name: Nextcloud | Enable required systemd services
  ansible.builtin.systemd_service:
      name: "{{ item }}"
      enabled: true
      state: restarted
      daemon_reload: true
  with_items:
      - apache2
      - php{{ cs_nc_php_version }}-fpm

- name: Nextcloud | Enable UFW port
  community.general.ufw:
      rule: allow
      port: "{{ cs_nc_port }}"
      state: enabled
