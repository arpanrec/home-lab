---
- name: Mini0 | KES | Create Group
  become: true
  ansible.builtin.group:
      name: "{{ minio_kes_group_name }}"
      state: present
      system: true
  register: minio_kes_group_name_create

- name: Mini0 | KES | Create User
  become: true
  ansible.builtin.user:
      name: "{{ minio_kes_user_name }}"
      group: "{{ minio_kes_group_name }}"
      groups:
          - docker
      shell: /bin/false
      system: true
      state: present
  register: minio_kes_user_name_create

- name: Mini0 | KES | Create Directory
  become: true
  ansible.builtin.file:
      name: "{{ item }}"
      owner: "{{ minio_kes_user_name }}"
      group: "{{ minio_kes_group_name }}"
      mode: "0755"
      state: directory
  with_items:
      - "{{ minio_kes_working_dir }}"
      - "{{ minio_kes_keystore_dir }}"

- name: Mini0 | KES | Docker Network
  community.docker.docker_network:
      name: "{{ minio_docker_network_name }}"
      state: present

- name: Mini0 | KES | Touch Cert Files
  become: true
  ansible.builtin.file:
      path: "{{ item }}"
      state: touch
      mode: "0644"
      owner: "{{ minio_kes_user_name }}"
      group: "{{ minio_kes_group_name }}"
  with_items:
      - "{{ minio_kes_cert_file }}"
      - "{{ minio_kes_cert_key_file }}"
      - "{{ minio_kes_cert_id_file }}"

- name: Mini0 | KES | Remove old Container
  become: true
  community.docker.docker_container:
      name: "{{ minio_kes_container_name }}"
      state: absent
      force_kill: true

- name: Mini0 | KES | Create Certificates
  become: false
  community.docker.docker_container:
      name: "{{ minio_kes_container_name }}"
      image: "{{ minio_kes_image }}:{{ minio_kes_version }}"
      user: "{{ minio_kes_user_name_create.uid }}:{{ minio_kes_group_name_create.gid }}"
      auto_remove: true
      entrypoint: ""
      working_dir: /
      volumes:
          - "{{ minio_kes_cert_file }}:{{ minio_kes_cert_file }}"
          - "{{ minio_kes_cert_key_file }}:{{ minio_kes_cert_key_file }}"
          - "{{ minio_kes_cert_id_file }}:{{ minio_kes_cert_id_file }}"
      command:
          - "/bin/bash"
          - "-c"
          - "/kes identity new --key '{{ minio_kes_cert_key_file }}' --cert '{{ minio_kes_cert_file }}' \
            kesadmin --force --dns '{{ minio_kes_container_name }}' && \
            /kes identity of '{{ minio_kes_cert_file }}' | tee '{{ minio_kes_cert_id_file }}'"

- name: Mini0 | KES | Read Certificate ID
  become: true
  ansible.builtin.slurp:
      src: "{{ minio_kes_cert_id_file }}"
  register: minio_kes_cert_id_file_read

- name: Mini0 | KES | Set Config Fact
  ansible.builtin.set_fact:
      minio_kes_config:
          version: v1
          address: 0.0.0.0:{{ minio_kes_port }}
          admin:
              identity: "{{ minio_kes_cert_id_file_read.content | b64decode }}"
          tls:
              key: "{{ minio_kes_cert_key_file }}"
              cert: "{{ minio_kes_cert_file }}"
              auth: "on"
              ca: "{{ minio_kes_cert_file }}"
          policy:
              minio:
                  allow:
                      - /v1/key/create/*
                      - /v1/key/generate/*
                      - /v1/key/decrypt/*
                      - /v1/key/bulk/decrypt
                      - /v1/key/list/*
                      - /v1/status
                      - /v1/metrics
                      - /v1/log/audit
                      - /v1/log/error

          keystore:
              fs:
                  path: "{{ minio_kes_keystore_dir }}"
          log:
              error: "on"
              audit: "on"

- name: Mini0 | KES | Write Config
  become: true
  ansible.builtin.copy:
      content: "{{ minio_kes_config | to_nice_yaml }}"
      dest: "{{ minio_kes_config_file }}"
      owner: "{{ minio_kes_user_name }}"
      group: "{{ minio_kes_group_name }}"
      mode: "0644"

- name: Mini0 | KES | Start Container
  become: false
  community.docker.docker_container:
      name: "{{ minio_kes_container_name }}"
      image: "{{ minio_kes_image }}:{{ minio_kes_version }}"
      user: "{{ minio_kes_user_name_create.uid }}:{{ minio_kes_group_name_create.gid }}"
      auto_remove: false
      detach: true
      restart_policy: unless-stopped
      hostname: "{{ minio_kes_container_name }}"
      networks:
          - name: "{{ minio_docker_network_name }}"
      volumes:
          - "{{ minio_kes_working_dir }}:{{ minio_kes_working_dir }}"
      command:
          - server
          - --config={{ minio_kes_config_file }}
