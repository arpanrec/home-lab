---
- name: Database | Postgres | Install python3-psycopg2
  ansible.builtin.apt:
      name:
          - python3-psycopg2
          - python3-mysqldb

- name: Database | Postgres | Stop old containers
  community.docker.docker_container:
      name: "{{ item }}"
      state: absent
      force_kill: true
  with_items:
      - nextcloud-mysql
      - postgres-main
      - pgadmin-main

- name: Database | Postgres | Create network
  community.docker.docker_network:
      name: postgres-net
      state: present

- name: Database | Postgres | Enable UFW port
  community.general.ufw:
      rule: allow
      port: "{{ item }}"
      state: enabled
  with_items:
      - "{{ cs_postgres_port }}"
      - "{{ cs_pg_admin_port }}"

- name: Database | Postgres | Create data directory
  ansible.builtin.file:
      path: "{{ cs_postgres_data_dir }}"
      state: directory
      mode: "0700"
      owner: 999
      # https://github.com/docker-library/postgres/blob/66da3846b40396249936938ee17e9684e6968a57/16/bookworm/Dockerfile#L11C25-L11C28
      group: 999
      # https://github.com/docker-library/postgres/blob/66da3846b40396249936938ee17e9684e6968a57/16/bookworm/Dockerfile#L11C25-L11C28

- name: Database | Postgres | Start Container
  community.docker.docker_container:
      name: postgres-main
      image: docker.io/library/postgres:16.3
      user: 999:999
      # https://github.com/docker-library/postgres/blob/66da3846b40396249936938ee17e9684e6968a57/16/bookworm/Dockerfile#L11C25-L11C28
      restart_policy: unless-stopped
      networks:
          - name: postgres-net
      volumes:
          - "{{ cs_postgres_data_dir }}:/var/lib/postgresql/data"
      state: started
      command: --port={{ cs_postgres_port }}
      ports:
          - "{{ cs_postgres_port }}:{{ cs_postgres_port }}"
      env:
          POSTGRES_PASSWORD: "{{ cs_postgres_password }}"
          POSTGRES_USER: "{{ cs_postgres_user }}"
          POSTGRES_DB: "{{ cs_postgres_db }}"

- name: Database | Postgres | Wait for service to start
  community.postgresql.postgresql_ping:
      login_host: "{{ cs_postgres_host }}"
      login_password: "{{ cs_postgres_password }}"
      login_user: "{{ cs_postgres_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_db }}"
  register: is_postgres_up
  until: is_postgres_up.is_available
  retries: 30
  delay: 3

- name: Database | Postgres | Create users
  community.postgresql.postgresql_user:
      name: "{{ item.value.user }}"
      password: "{{ item.value.password }}"
      state: "present"
      login_host: "{{ cs_postgres_host }}"
      login_password: "{{ cs_postgres_password }}"
      login_user: "{{ cs_postgres_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_db }}"
  with_items: "{{ cs_postgres_apps | dict2items }}"

- name: Database | Postgres | Create databases
  community.postgresql.postgresql_db:
      name: "{{ item.value.database }}"
      state: "present"
      owner: "{{ item.value.user }}"
      login_host: "{{ cs_postgres_host }}"
      login_password: "{{ cs_postgres_password }}"
      login_user: "{{ cs_postgres_user }}"
      login_port: "{{ cs_postgres_port }}"
  with_items: "{{ cs_postgres_apps | dict2items }}"

- name: Database | Postgres | pgAdmin | Create directories
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      mode: "0755"
      owner: "5050"
      group: "5050"
  with_items:
      - "{{ cs_pg_admin_dir }}"
      - "/etc/ssl/{{ cs_pg_admin_domain }}"

- name: Database | Postgres | pgAdmin | Write pgpassfile # TODO: Not working
  ansible.builtin.copy:
      content: |+
          postgres-main:{{ cs_postgres_port }}:{{ cs_postgres_db }}:{{ cs_postgres_user }}:{{
           cs_postgres_password | regex_escape() }}
      dest: "{{ cs_pg_admin_dir }}/pgpassfile"
      mode: "0600"
      owner: "5050"
      group: "5050"

- name: Database | Postgres | pgAdmin | Set Server json fact
  ansible.builtin.set_fact:
      cs_pg_admin_servers:
          Servers:
              1:
                  Name: "PG-Main"
                  Group: "Servers"
                  Host: "postgres-main"
                  Port: "{{ cs_postgres_port }}"
                  MaintenanceDB: "{{ cs_postgres_db }}"
                  Username: "{{ cs_postgres_user }}"
                  SSLMode: "prefer"
                  PassFile: "/pgadmin4/pgpassfile"

- name: Database | Postgres | pgAdmin | Write pgadmin servers.json
  ansible.builtin.copy:
      content: "{{ cs_pg_admin_servers | to_nice_json }}"
      dest: "{{ cs_pg_admin_dir }}/servers.json"
      mode: "0644"
      owner: "5050"
      group: "5050"

- name: Database | Postgres | pgAdmin | Write SSL certificate and key
  ansible.builtin.copy:
      content: "{{ item.content }}"
      dest: "/etc/ssl/{{ cs_pg_admin_domain }}/{{ item.dest }}"
      mode: "0644"
  with_items:
      - dest: fullchain.pem
        content: "{{ cs_pg_admin_ssl_cert_b64 | b64decode }}"
      - dest: privkey.pem
        content: "{{ cs_pg_admin_ssl_key_b64 | b64decode }}"

- name: Database | Postgres | pgAdmin | Start Container
  community.docker.docker_container:
      name: pgadmin-main
      image: docker.io/dpage/pgadmin4:8.9
      user: "5050:5050"
      restart_policy: unless-stopped
      networks:
          - name: postgres-net
      state: started
      ports:
          - "{{ cs_pg_admin_port }}:{{ cs_pg_admin_port }}"
      env:
          PGADMIN_DEFAULT_EMAIL: "{{ cs_pg_admin_email }}"
          PGADMIN_DEFAULT_PASSWORD: "{{ cs_pg_admin_password }}"
          PGADMIN_LISTEN_PORT: "{{ cs_pg_admin_port | string }}"
          PGADMIN_ENABLE_TLS: "True"
      volumes:
          - "/etc/ssl/{{ cs_pg_admin_domain }}/fullchain.pem:/certs/server.cert:ro"
          - "/etc/ssl/{{ cs_pg_admin_domain }}/privkey.pem:/certs/server.key:ro"
          - "{{ cs_pg_admin_dir }}/servers.json:/pgadmin4/servers.json"
          - "{{ cs_pg_admin_dir }}/pgpassfile:/pgadmin4/pgpassfile:ro"

- name: Database | Postgres | pgAdmin | Wait for service to start
  ansible.builtin.uri:
      url: https://{{ cs_pg_admin_domain }}:{{ cs_pg_admin_port }}/misc/ping
      return_content: true
      status_code:
          - 200
  register: is_pgadmin_up
  retries: 30
  delay: 3
  until: is_pgadmin_up.status == 200 and is_pgadmin_up.content == "PING"
