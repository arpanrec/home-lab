---
- name: Minio | Assert | Set minio_server_kes_secret_id_vault
  ansible.builtin.set_fact:
      minio_server_kes_secret_id_vault: "{{ minio_server_kes_secret_id_vault | d(inventory_hostname)
          | mandatory }}"

- name: Minio | Assert | Get KES Admin Key Id from Vault
  become: false
  delegate_facts: true
  delegate_to: localhost
  community.hashi_vault.vault_kv2_get:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      engine_mount_point: "secret"
      path: "minio/kes/servers/{{ minio_server_kes_secret_id_vault }}/config"
      token: "{{ vault_ha_client.token }}"
      validate_certs: true
  register: minio_server_kes_secret_dict
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"

- name: Minio | Assert | minio_server_hostnames
  ansible.builtin.assert:
      that:
          - minio_server_hostnames | type_debug == 'list'
          - minio_server_hostnames | length > 0
      fail_msg: "minio_server_hostnames must be a list with at least one element"

- name: Minio | Assert | minio_server_ips
  ansible.builtin.assert:
      that:
          - minio_server_ips | type_debug == 'list'
          - minio_server_ips | length > 0
      fail_msg: "minio_server_ips must be a list with at least one element"

- name: Minio | Assert | minio_server_kes_endpoint hostname
  ansible.builtin.assert:
      that:
          - |+
              minio_server_kes_endpoint | urlsplit('hostname')
              in
              (minio_server_kes_secret_dict.secret.hostnames + minio_server_kes_secret_dict.secret.ips)
      fail_msg: "minio_server_kes_endpoint must be a valid URL with hostname or IP address"

- name: Minio | Assert | minio_server_kes_endpoint port
  ansible.builtin.assert:
      that:
          - minio_server_kes_endpoint | urlsplit('port') == minio_server_kes_secret_dict.secret.port
