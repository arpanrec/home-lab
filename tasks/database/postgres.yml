---
- name: Database | Postgres | Check if the secret exists in Vault
  community.hashi_vault.vault_list:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: "{{ ps_postgres_vault_secret_mount_path }}/metadata/{{ ps_postgres_vault_secret_name }}"
      # engine_mount_point: secret
      mount_point: "{{ vault_ha_client.userpass_mount }}"
      ca_cert: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      validate_certs: true
      auth_method: userpass
      username: "{{ vault_ha_client.admin_user }}"
      password: "{{ vault_ha_client.admin_password }}"
  register: __cs_postgres_vault_list_response
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"
  delegate_to: localhost
  failed_when: >
      __cs_postgres_vault_list_response is failed
      and __cs_postgres_vault_list_response.msg != 'The path \'' + ps_postgres_vault_secret_mount_path
       + '/metadata/' + ps_postgres_vault_secret_name + '\' doesn\'t seem to exist.'

- name: Database | Postgres | Write the secret to Vault
  when: __cs_postgres_vault_list_response.msg and __cs_postgres_vault_list_response.msg
      != 'The path \'' + ps_postgres_vault_secret_mount_path + '/metadata/' + ps_postgres_vault_secret_name
      + '\' doesn\'t seem to exist.'
  community.hashi_vault.vault_write:
      url: "https://{{ vault_ha_client.vault_ha_hostname }}:{{ vault_ha_client.vault_ha_port }}"
      path: "{{ ps_postgres_vault_secret_mount_path }}/data/{{ ps_postgres_vault_secret_name }}"
      # engine_mount_point: secret
      mount_point: "{{ vault_ha_client.userpass_mount }}"
      ca_cert: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      validate_certs: true
      auth_method: userpass
      username: "{{ vault_ha_client.admin_user }}"
      password: "{{ vault_ha_client.admin_password }}"
      data:
          maintenance_user: "{{ lookup('community.general.random_string', length=12, special=false) }}"
          maintenance_password: "{{ lookup('ansible.builtin.password', '/dev/null',
              chars=['ascii_lowercase', 'digits'], length=16) }}"
          maintenance_db: "{{ lookup('community.general.random_string', length=8, special=false, numbers=false,
              upper=false) }}"
          pg_admin_password: "{{ lookup('ansible.builtin.password', '/dev/null',
              chars=['ascii_lowercase', 'digits'], length=16) }}"
  register: __cs_postgres_vault_list_response
  environment:
      VAULT_CACERT: "{{ vault_ha_client.vault_root_ca_cert_file }}"
      VAULT_CLIENT_CERT: "{{ vault_ha_client.vault_client_cert_file }}"
      VAULT_CLIENT_KEY: "{{ vault_ha_client.vault_client_key_file }}"
  delegate_to: localhost

- name: Debug
  ansible.builtin.debug:
      msg: "{{ __cs_postgres_vault_list_response }}"

- name: Debug
  ansible.builtin.debug:
      msg: "{{ lookup('community.general.random_string', length=12, special=false) }} ||
          {{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'digits'], length=16) }}"

- name: Hard fail
  ansible.builtin.fail:
      msg: "Hard fail"

- name: Database | Postgres | Install python3-psycopg2
  ansible.builtin.apt:
      name: python3-psycopg2

- name: Database | Postgres | Stop old containers
  community.docker.docker_container:
      name: "{{ item }}"
      state: absent
      force_kill: true
  with_items:
      - "{{ cs_postgres_container_name }}"
      - "{{ ps_postgres_pg_admin_docker_container_name }}"

- name: Database | Postgres | Create network
  community.docker.docker_network:
      name: "{{ cs_postgres_network_name }}"
      state: present

- name: Database | Postgres | Create data directory
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      mode: "0700"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
  with_items:
      - "{{ cs_postgres_dir }}"
      - "{{ cs_postgres_data_dir }}"
      - "{{ cs_postgres_certs_dir }}"
      - "{{ cs_postgres_certs_privkey_file | dirname }}"
      - "{{ cs_postgres_certs_cert_file | dirname }}"
      - "{{ cs_postgres_certs_chain_file | dirname }}"
      - "{{ cs_postgres_certs_csr_file | dirname }}"
      - "{{ cs_postgres_client_certs_dir }}"

- name: Database | Postgres | Create SSL Private key
  community.crypto.openssl_privatekey:
      path: "{{ cs_postgres_certs_privkey_file }}"
      size: 4096
      mode: "0600"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Create SSL CSR
  community.crypto.openssl_csr:
      path: "{{ cs_postgres_certs_csr_file }}"
      privatekey_path: "{{ cs_postgres_certs_privkey_file }}"
      common_name: "{{ cs_postgres_maintenance_user }}"
      subject_alt_name:
          - "IP:{{ cs_postgres_host_public_ip }}"
          - "DNS:{{ cs_postgres_host_public_domain }}"
          - "DNS:{{ cs_postgres_host_private_domain }}"
          - "IP:{{ cs_postgres_host_private_ip }}"
          - "DNS:localhost"
          - "IP:127.0.0.1"
          - "DNS:{{ cs_postgres_maintenance_user }}"
          - "DNS:{{ cs_postgres_container_name }}"
      key_usage:
          - "digitalSignature"
          - "keyEncipherment"
          - "keyAgreement"
      extended_key_usage:
          - "serverAuth"
      create_subject_key_identifier: true
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Sign SSL CSR
  community.crypto.x509_certificate:
      path: "{{ cs_postgres_certs_cert_file }}"
      csr_path: "{{ cs_postgres_certs_csr_file }}"
      provider: ownca
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_passphrase }}"
      ownca_content: "{{ root_ca_cert_pem }}"
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      return_content: true

- name: Database | Postgres | Write CA certificate
  ansible.builtin.copy:
      content: "{{ root_ca_cert_pem }}"
      dest: "{{ cs_postgres_certs_chain_file }}"
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      remote_src: false

- name: Database | Postgres | Create pg_hba.conf
  ansible.builtin.copy:
      src: files/db/postgresql/pg_hba.conf
      dest: "{{ cs_postgres_hba_file }}"
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      remote_src: false

- name: Database | Postgres | Start Container
  community.docker.docker_container:
      name: "{{ cs_postgres_container_name }}"
      image: "{{ cs_postgres_docker_image }}:{{ cs_postgres_docker_image_tag }}"
      user: "{{ cs_postgres_run_user }}:{{ cs_postgres_run_group }}"
      restart_policy: unless-stopped
      networks:
          - name: "{{ cs_postgres_network_name }}"
      volumes:
          - "{{ cs_postgres_data_dir }}:/var/lib/postgresql/data"
          - "{{ cs_postgres_certs_privkey_file }}:/server-privkey.pem:ro"
          - "{{ cs_postgres_certs_cert_file }}:/server-cert.pem:ro"
          - "{{ cs_postgres_certs_chain_file }}:/server-chain.pem:ro"
          - "{{ cs_postgres_hba_file }}:/pg_hba.conf:ro"
      state: started
      command: "--port={{ cs_postgres_port }}
          --ssl=on
          --ssl_cert_file=/server-cert.pem
          --ssl_key_file=/server-privkey.pem
          --ssl_ca_file=/server-chain.pem
          -c hba_file=/pg_hba.conf"
      ports:
          - "{{ cs_postgres_port }}:{{ cs_postgres_port }}"
      env:
          POSTGRES_PASSWORD: "{{ cs_postgres_maintenance_password }}"
          POSTGRES_USER: "{{ cs_postgres_maintenance_user }}"
          POSTGRES_DB: "{{ cs_postgres_maintenance_db }}"
          TZ: Asia/Kolkata

- name: Database | Postgres | Client | Create SSL Private key
  community.crypto.openssl_privatekey:
      path: "{{ cs_postgres_client_certs_dir }}/client-privkey.pem"
      size: 4096
      mode: "0600"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"

- name: Database | Postgres | Client | Create SSL CSR
  community.crypto.openssl_csr:
      path: "{{ cs_postgres_client_certs_dir }}/client-csr-{{ item.value.user }}.pem"
      privatekey_path: "{{ cs_postgres_client_certs_dir }}/client-privkey.pem"
      common_name: "{{ item.value.user }}"
      key_usage:
          - "digitalSignature"
          - "keyEncipherment"
          - "keyAgreement"
      extended_key_usage:
          - "clientAuth"
      create_subject_key_identifier: true
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
  with_items: "{{ cs_postgres_apps_dict |
      combine({cs_postgres_maintenance_db: {'database': cs_postgres_maintenance_db, 'password':
      cs_postgres_maintenance_password, 'user': cs_postgres_maintenance_user}}) | dict2items }}"

- name: Database | Postgres | Client | Sign SSL CSR
  community.crypto.x509_certificate:
      path: "{{ cs_postgres_client_certs_dir }}/client-cert-{{ item.value.user }}.pem"
      csr_path: "{{ cs_postgres_client_certs_dir }}/client-csr-{{ item.value.user }}.pem"
      provider: ownca
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_passphrase }}"
      ownca_content: "{{ root_ca_cert_pem }}"
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      return_content: true
  with_items: "{{ cs_postgres_apps_dict | combine({cs_postgres_maintenance_db:
      {'database': cs_postgres_maintenance_db, 'password':
      cs_postgres_maintenance_password, 'user': cs_postgres_maintenance_user}}) | dict2items }}"

- name: Database | Postgres | Client | Write CA certificate
  ansible.builtin.copy:
      content: "{{ root_ca_cert_pem }}"
      dest: "{{ cs_postgres_client_certs_dir }}/client-chain.pem"
      mode: "0644"
      owner: "{{ cs_postgres_run_user }}"
      group: "{{ cs_postgres_run_group }}"
      remote_src: false

- name: Database | Postgres | Wait for service to start
  community.postgresql.postgresql_ping:
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ cs_postgres_client_certs_dir }}/client-chain.pem"
      ssl_cert: "{{ cs_postgres_client_certs_dir }}/client-cert-{{ cs_postgres_maintenance_user }}.pem"
      ssl_key: "{{ cs_postgres_client_certs_dir }}/client-privkey.pem"
  register: is_postgres_up
  until: is_postgres_up.is_available
  retries: 30
  delay: 3

- name: Database | Postgres | Create users
  community.postgresql.postgresql_user:
      name: "{{ item.value.user }}"
      password: "{{ item.value.password }}"
      state: "present"
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      login_db: "{{ cs_postgres_maintenance_db }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ cs_postgres_client_certs_dir }}/client-chain.pem"
      ssl_cert: "{{ cs_postgres_client_certs_dir }}/client-cert-{{ cs_postgres_maintenance_user }}.pem"
      ssl_key: "{{ cs_postgres_client_certs_dir }}/client-privkey.pem"
  with_items: "{{ cs_postgres_apps_dict | dict2items }}"

- name: Database | Postgres | Create databases
  community.postgresql.postgresql_db:
      name: "{{ item.value.database }}"
      state: "present"
      encoding: "UTF8"
      template: "template0"
      owner: "{{ item.value.user }}"
      login_host: "{{ cs_postgres_host_private_ip }}"
      login_password: "{{ cs_postgres_maintenance_password }}"
      login_user: "{{ cs_postgres_maintenance_user }}"
      login_port: "{{ cs_postgres_port }}"
      ssl_mode: verify-full
      ssl_rootcert: "{{ cs_postgres_client_certs_dir }}/client-chain.pem"
      ssl_cert: "{{ cs_postgres_client_certs_dir }}/client-cert-{{ cs_postgres_maintenance_user }}.pem"
      ssl_key: "{{ cs_postgres_client_certs_dir }}/client-privkey.pem"
  with_items: "{{ cs_postgres_apps_dict | dict2items }}"

- name: Database | Postgres | pgAdmin | Create directories
  ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      mode: "0755"
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"
  with_items:
      - "{{ cs_postgres_pg_admin_dir }}"
      - "{{ cs_postgres_pg_admin_certs_dir }}"
      - "{{ cs_postgres_pg_admin_certs_privkey_file | dirname }}"
      - "{{ cs_postgres_pg_admin_certs_cert_file | dirname }}"
      - "{{ cs_postgres_pg_admin_certs_chain_file | dirname }}"
      - "{{ cs_postgres_pg_admin_certs_csr_file | dirname }}"
      - "{{ cs_postgres_pg_admin_client_certs_dir }}"
      - "{{ ps_postgres_pg_admin_pg_pass_file | dirname }}"
      - "{{ ps_postgres_pg_admin_pg_servers_file | dirname }}"
      - "{{ ps_postgres_pg_admin_entrypoint_file | dirname }}"

- name: Database | Postgres | pgAdmin | Copy postgresql certificates
  ansible.builtin.copy:
      src: "{{ cs_postgres_client_certs_dir }}/"
      dest: "{{ cs_postgres_pg_admin_client_certs_dir }}"
      mode: "0755"
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"
      remote_src: true

- name: Database | Postgres | pgAdmin | Write pgpassfile
  ansible.builtin.lineinfile:
      line: "{{ cs_postgres_container_name }}\
          :{{ cs_postgres_port }}\
          :{{ item.value.database }}\
          :{{ item.value.user }}\
          :{{ item.value.password | regex_escape() }}"
      regexp: "^{{ cs_postgres_container_name }}:{{ cs_postgres_port }}:\
          {{ item.value.database }}:{{ item.value.user }}:"
      path: "{{ ps_postgres_pg_admin_pg_pass_file }}"
      create: true
      mode: "0600"
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"

  with_items: "{{ cs_postgres_apps_dict | combine({cs_postgres_maintenance_db:
      {'database': cs_postgres_maintenance_db, 'password':
      cs_postgres_maintenance_password, 'user': cs_postgres_maintenance_user}}) | dict2items }}"

- name: Database | Postgres | pgAdmin | Set Server json fact
  with_items: "{{ cs_postgres_apps_dict | combine({cs_postgres_maintenance_db:
      {'database': cs_postgres_maintenance_db, 'password':
      cs_postgres_maintenance_password, 'user': cs_postgres_maintenance_user}}) | dict2items }}"
  loop_control:
      index_var: index
  vars:
      server_index: "{{ index + 1 }}"
  ansible.builtin.set_fact:
      cs_pg_admin_servers: "{{ cs_pg_admin_servers | default({}) |
          combine({server_index: {'Name': item.key,
          'Group': 'Servers',
          'Host': cs_postgres_container_name,
          'Port': (cs_postgres_port | int),
          'SSLMode': 'verify-full',
          'SSLCert': '/client-cert-' + item.value.user + '.pem',
          'SSLKey': '/client-privkey.pem',
          'SSLRootCert': '/client-chain.pem',
          'MaintenanceDB': item.value.database,
          'PassFile': '/pgpassfile',
          'Username': item.value.user}}) }}"

- name: Database | Postgres | pgAdmin | Write pgadmin servers.json
  ansible.builtin.copy:
      content: "{{ {'Servers': cs_pg_admin_servers} | to_nice_json }}"
      dest: "{{ ps_postgres_pg_admin_pg_servers_file }}"
      mode: "0644"
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"

- name: Database | Postgres | pgAdmin | Server Certificate | Create SSL Private key
  community.crypto.openssl_privatekey:
      path: "{{ cs_postgres_pg_admin_certs_privkey_file }}"
      size: 4096
      mode: "0600"
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"

- name: Database | Postgres | pgAdmin | Server Certificate | Create SSL CSR
  community.crypto.openssl_csr:
      path: "{{ cs_postgres_pg_admin_certs_csr_file }}"
      privatekey_path: "{{ cs_postgres_pg_admin_certs_privkey_file }}"
      common_name: "{{ cs_postgres_pg_admin_domain }}"
      subject_alt_name:
          - "DNS:{{ cs_postgres_pg_admin_domain }}"
      key_usage:
          - "digitalSignature"
          - "keyEncipherment"
          - "keyAgreement"
      extended_key_usage:
          - "serverAuth"
      create_subject_key_identifier: true
      mode: "0644"
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"

- name: Database | Postgres | pgAdmin | Server Certificate | Sign SSL CSR
  community.crypto.x509_certificate:
      path: "{{ cs_postgres_pg_admin_certs_cert_file }}"
      csr_path: "{{ cs_postgres_pg_admin_certs_csr_file }}"
      provider: ownca
      ownca_privatekey_content: "{{ root_ca_key_pem }}"
      ownca_privatekey_passphrase: "{{ root_ca_key_passphrase }}"
      ownca_content: "{{ root_ca_cert_pem }}"
      mode: "0644"
      return_content: true
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"
  register: cs_db_postgresql_pgadmin_ssl_cert

- name: Database | Postgres | pgAdmin | Server Certificate | Write Full chain
  ansible.builtin.copy:
      content: |+
          {{ cs_db_postgresql_pgadmin_ssl_cert.certificate | trim }}
          {{ root_ca_cert_pem }}
      dest: "{{ cs_postgres_pg_admin_certs_fullchain_file }}"
      mode: "0644"
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"

- name: Database | Postgres | pgAdmin | File copy entrypoint.sh
  ansible.builtin.template:
      src: templates/db/postgresql/pgadmin-entrypoint.sh.j2
      dest: "{{ ps_postgres_pg_admin_entrypoint_file }}"
      mode: "0755"
      owner: "{{ cs_postgres_pg_admin_run_user }}"
      group: "{{ cs_postgres_pg_admin_run_group }}"

- name: Database | Postgres | pgAdmin | Start Container
  community.docker.docker_container:
      name: "{{ ps_postgres_pg_admin_docker_container_name }}"
      image: "{{ ps_postgres_pg_admin_docker_image }}:{{ ps_postgres_pg_admin_docker_image_tag }}"
      user: "{{ cs_postgres_pg_admin_run_user }}:{{ cs_postgres_pg_admin_run_group }}"
      restart_policy: unless-stopped
      networks:
          - name: "{{ cs_postgres_network_name }}"
      state: started
      ports:
          - "{{ cs_postgres_pg_admin_port }}:{{ cs_postgres_pg_admin_port }}"
      entrypoint:
          - /file-entrypoint.sh
      env:
          PGADMIN_DEFAULT_EMAIL: "{{ cs_postgres_pg_admin_email }}"
          PGADMIN_DEFAULT_PASSWORD: "{{ cs_postgres_pg_admin_password }}"
          PGADMIN_LISTEN_PORT: "{{ cs_postgres_pg_admin_port | string }}"
          PGADMIN_ENABLE_TLS: "True"
          TZ: Asia/Kolkata
      volumes:
          - "{{ cs_postgres_pg_admin_certs_fullchain_file }}:/certs/server.cert:ro"
          - "{{ cs_postgres_pg_admin_certs_privkey_file }}:/certs/server.key:ro"
          - "{{ ps_postgres_pg_admin_entrypoint_file }}:/file-entrypoint.sh"
          - "{{ ps_postgres_pg_admin_pg_servers_file }}:/pgadmin4/servers.json"
          - "{{ ps_postgres_pg_admin_pg_pass_file }}:/pgpassfile"
          - "{{ cs_postgres_pg_admin_client_certs_dir }}:/client-certs"

- name: Database | Postgres | Enable UFW port
  community.general.ufw:
      rule: allow
      port: "{{ item }}"
      state: enabled
  with_items:
      - "{{ cs_postgres_port }}"
      - "{{ cs_postgres_pg_admin_port }}"

- name: Database | Postgres | pgAdmin | Wait for service to start
  ansible.builtin.uri:
      url: https://{{ cs_postgres_pg_admin_domain }}:{{ cs_postgres_pg_admin_port }}/misc/ping
      return_content: true
      status_code:
          - 200
      ca_path: "{{ cs_postgres_pg_admin_certs_fullchain_file }}"
      validate_certs: true
  register: is_pgadmin_up
  retries: 30
  delay: 3
  until: is_pgadmin_up.status == 200 and is_pgadmin_up.content == "PING"
